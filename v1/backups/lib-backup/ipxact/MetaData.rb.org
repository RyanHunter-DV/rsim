# The very top namespace of the IP-XACT meta database, this will be a common space for
# different user scopes to access some of the common data information, such as the design object.
# ----------------------------------------------------------------------------------------------
# Rsim.design -> the design object that created by user.
# Rsim.generators -> the hash stores all generator chain objects.
# ----------------------------------------------------------------------------------------------
module MetaData

	@design= nil;
	@generators={};

	# path stored.
	# [:components] => 'OUT/components'
	# [:ComponentName] => 'OUT/components/ComponentName'
	# [:configs] => 'OUT/configs'
	# [:ConfigName] => 'OUT/configs/ConfigName'
	@outs = {};

	## registerBus(o), description
	def registerBus(o); ##{{{
		puts "#{__FILE__}:(registerBus(o)) is not ready yet."
		raise NodeException.new("bus(#{o.vlnv}) defined multiple times") if @busDefinitions.has_key?(o.vlnv);
		@busDefinitions[o.vlnv]=o;
	end ##}}}
	## registerComponent(o), 
	# called by self.register, specific operations while registering the Component object
	def registerComponent(o); ##{{{
		puts "#{__FILE__}:(registerComponent(o)) is not ready yet."
		#TODO
	end ##}}}

	## self.register(obj), 
	# according to obj.datatype, select to register into local pool.
	# the obj must be extends of IpXactData
	def self.register(obj); ##{{{
		puts "#{__FILE__}:(self.register(obj)) is not ready yet."
		if obj.datatype
			msg = "register#{obj.datatype.capitalize}".to_sym;
			self.send(msg,obj);
		else
			raise ToolFatalException.new("MetaData's register called by an object without IpXactData")
		end
	end ##}}}
end